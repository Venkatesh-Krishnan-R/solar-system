name: Solar System CI

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature'
      
permissions:
  checks: write
  
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: SuperPassword
  
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
            
        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
           # npm cache files are stored in `~/.npm` on Linux/macOS
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

        - name: Test Summary
          uses: test-summary/action@v2
          with:
            paths: "test-results.xml"
            output: "README.md"
          if: always()

          #Only for junit reports
        - name: Publish Test Report
          uses: mikepenz/action-junit-report@v4
          if: success() || failure() # always run even if the previous step fails
          with:
            report_paths: 'test-results.xml'
            include_passed: true
            detailed_summary: true

          #multiformat  
        - name: Report test results
          uses: dorny/test-reporter@v1.9.1
          with:
            name: JUnit Tests
            path: test-results.xml
            reporter: java-junit

    code-coverage:
        name: Code Coverage
        needs: unit-testing
        if: always()
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 20
          uses: actions/setup-node@v3
          with:
            node-version: 20
            
        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
           # npm cache files are stored in `~/.npm` on Linux/macOS
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            
        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          run: npm run coverage
          continue-on-error: true

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
            
    docker:
        name: Containerization
        if: always()
        needs: [unit-testing, code-coverage]
        permissions: 
          packages: write
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}
              
          - name: Login to GHCR
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}
              
          - name: Build Docker image for testing
            uses: docker/build-push-action@v4
            with:
              context: .
              push: false
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          - name: Docker image Test
            run: |
             docker images
             
             docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI='mongodb+srv://supercluster.d83jj.mongodb.net/superData' \
                -e MONGO_USERNAME='superuser' \
                -e MONGO_PASSWORD='SuperPassword' \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

             export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
             echo $IP
             echo Test the image URL using wget
             wget -q -O- 127.0.0.1:3000/live | grep live
             
          - name: Container Registry Push
            uses: docker/build-push-action@v4
            with:
              context: .
              push: true
              tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/venkatesh-krishnan-r/solar-system:${{ github.sha }}
